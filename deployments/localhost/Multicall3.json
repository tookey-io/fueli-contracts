{
  "address": "0x171C57d06726c71d620578De5C72D3230191C58E",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "allowFailure",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Call3[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate3",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "allowFailure",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Call3Value[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate3Value",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "blockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBasefee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "basefee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "chainid",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryAggregate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryBlockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x54af3be11abcbd4d2f17417799a41518df33eabf81d7a8fbd14c5b51247ef31e",
  "receipt": {
    "to": null,
    "from": "0x23F7EF09fAe91eE240691b2FeC4DC075E1383EFd",
    "contractAddress": "0x171C57d06726c71d620578De5C72D3230191C58E",
    "transactionIndex": 0,
    "gasUsed": "647058",
    "logsBloom": "0x
    "blockHash": "0xc98cde35220a9bf20ab5bd7ed1b9df606690593c0bb4bdba57dead7675e11158",
    "transactionHash": "0x54af3be11abcbd4d2f17417799a41518df33eabf81d7a8fbd14c5b51247ef31e",
    "logs": [],
    "blockNumber": 8,
    "cumulativeGasUsed": "647058",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f49de413493511de562be643249daff1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call3[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate3\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call3Value[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate3Value\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"blockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBasefee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"basefee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryAggregate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryBlockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>Andreas Bigger <andreas@nascent.xyz>Matt Solomon <matt@mattsolomon.dev>\",\"details\":\"Multicall & Multicall2 backwards-compatibleAggregate methods are marked `payable` to save 24 gas per call\",\"kind\":\"dev\",\"methods\":{\"aggregate((address,bytes)[])\":{\"params\":{\"calls\":\"An array of Call structs\"},\"returns\":{\"blockNumber\":\"The block number where the calls were executed\",\"returnData\":\"An array of bytes containing the responses\"}},\"aggregate3((address,bool,bytes)[])\":{\"params\":{\"calls\":\"An array of Call3 structs\"},\"returns\":{\"returnData\":\"An array of Result structs\"}},\"aggregate3Value((address,bool,uint256,bytes)[])\":{\"params\":{\"calls\":\"An array of Call3Value structs\"},\"returns\":{\"returnData\":\"An array of Result structs\"}},\"blockAndAggregate((address,bytes)[])\":{\"params\":{\"calls\":\"An array of Call structs\"},\"returns\":{\"blockHash\":\"The hash of the block where the calls were executed\",\"blockNumber\":\"The block number where the calls were executed\",\"returnData\":\"An array of Result structs\"}},\"getBlockHash(uint256)\":{\"params\":{\"blockNumber\":\"The block number\"}},\"tryAggregate(bool,(address,bytes)[])\":{\"params\":{\"calls\":\"An array of Call structs\",\"requireSuccess\":\"If true, require all calls to succeed\"},\"returns\":{\"returnData\":\"An array of Result structs\"}},\"tryBlockAndAggregate(bool,(address,bytes)[])\":{\"params\":{\"calls\":\"An array of Call structs\"},\"returns\":{\"blockHash\":\"The hash of the block where the calls were executed\",\"blockNumber\":\"The block number where the calls were executed\",\"returnData\":\"An array of Result structs\"}}},\"title\":\"Multicall3\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"aggregate((address,bytes)[])\":{\"notice\":\"Backwards-compatible call aggregation with Multicall\"},\"aggregate3((address,bool,bytes)[])\":{\"notice\":\"Aggregate calls, ensuring each returns success if required\"},\"aggregate3Value((address,bool,uint256,bytes)[])\":{\"notice\":\"Aggregate calls with a msg valueReverts if msg.value is less than the sum of the call values\"},\"blockAndAggregate((address,bytes)[])\":{\"notice\":\"Backwards-compatible with Multicall2Aggregate calls and allow failures using tryAggregate\"},\"getBasefee()\":{\"notice\":\"Gets the base fee of the given blockCan revert if the BASEFEE opcode is not implemented by the given chain\"},\"getBlockHash(uint256)\":{\"notice\":\"Returns the block hash for the given block number\"},\"getBlockNumber()\":{\"notice\":\"Returns the block number\"},\"getChainId()\":{\"notice\":\"Returns the chain id\"},\"getCurrentBlockCoinbase()\":{\"notice\":\"Returns the block coinbase\"},\"getCurrentBlockDifficulty()\":{\"notice\":\"Returns the block difficulty\"},\"getCurrentBlockGasLimit()\":{\"notice\":\"Returns the block gas limit\"},\"getCurrentBlockTimestamp()\":{\"notice\":\"Returns the block timestamp\"},\"getEthBalance(address)\":{\"notice\":\"Returns the (ETH) balance of a given address\"},\"getLastBlockHash()\":{\"notice\":\"Returns the block hash of the last block\"},\"tryAggregate(bool,(address,bytes)[])\":{\"notice\":\"Backwards-compatible with Multicall2Aggregate calls without requiring success\"},\"tryBlockAndAggregate(bool,(address,bytes)[])\":{\"notice\":\"Backwards-compatible with Multicall2Aggregate calls and allow failures using tryAggregate\"}},\"notice\":\"Aggregate results from multiple function calls\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Multicall.sol\":\"Multicall3\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @title Multicall3\\n/// @notice Aggregate results from multiple function calls\\n/// @dev Multicall & Multicall2 backwards-compatible\\n/// @dev Aggregate methods are marked `payable` to save 24 gas per call\\n/// @author Michael Elliot <mike@makerdao.com>\\n/// @author Joshua Levine <joshua@makerdao.com>\\n/// @author Nick Johnson <arachnid@notdot.net>\\n/// @author Andreas Bigger <andreas@nascent.xyz>\\n/// @author Matt Solomon <matt@mattsolomon.dev>\\ncontract Multicall3 {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n\\n    struct Call3 {\\n        address target;\\n        bool allowFailure;\\n        bytes callData;\\n    }\\n\\n    struct Call3Value {\\n        address target;\\n        bool allowFailure;\\n        uint256 value;\\n        bytes callData;\\n    }\\n\\n    struct Result {\\n        bool success;\\n        bytes returnData;\\n    }\\n\\n    /// @notice Backwards-compatible call aggregation with Multicall\\n    /// @param calls An array of Call structs\\n    /// @return blockNumber The block number where the calls were executed\\n    /// @return returnData An array of bytes containing the responses\\n    function aggregate(Call[] calldata calls) public payable returns (uint256 blockNumber, bytes[] memory returnData) {\\n        blockNumber = block.number;\\n        uint256 length = calls.length;\\n        returnData = new bytes[](length);\\n        Call calldata call;\\n        for (uint256 i = 0; i < length;) {\\n            bool success;\\n            call = calls[i];\\n            (success, returnData[i]) = call.target.call(call.callData);\\n            require(success, \\\"Multicall3: call failed\\\");\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /// @notice Backwards-compatible with Multicall2\\n    /// @notice Aggregate calls without requiring success\\n    /// @param requireSuccess If true, require all calls to succeed\\n    /// @param calls An array of Call structs\\n    /// @return returnData An array of Result structs\\n    function tryAggregate(bool requireSuccess, Call[] calldata calls) public payable returns (Result[] memory returnData) {\\n        uint256 length = calls.length;\\n        returnData = new Result[](length);\\n        Call calldata call;\\n        for (uint256 i = 0; i < length;) {\\n            Result memory result = returnData[i];\\n            call = calls[i];\\n            (result.success, result.returnData) = call.target.call(call.callData);\\n            if (requireSuccess) require(result.success, \\\"Multicall3: call failed\\\");\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /// @notice Backwards-compatible with Multicall2\\n    /// @notice Aggregate calls and allow failures using tryAggregate\\n    /// @param calls An array of Call structs\\n    /// @return blockNumber The block number where the calls were executed\\n    /// @return blockHash The hash of the block where the calls were executed\\n    /// @return returnData An array of Result structs\\n    function tryBlockAndAggregate(bool requireSuccess, Call[] calldata calls) public payable returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\\n        blockNumber = block.number;\\n        blockHash = blockhash(block.number);\\n        returnData = tryAggregate(requireSuccess, calls);\\n    }\\n\\n    /// @notice Backwards-compatible with Multicall2\\n    /// @notice Aggregate calls and allow failures using tryAggregate\\n    /// @param calls An array of Call structs\\n    /// @return blockNumber The block number where the calls were executed\\n    /// @return blockHash The hash of the block where the calls were executed\\n    /// @return returnData An array of Result structs\\n    function blockAndAggregate(Call[] calldata calls) public payable returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\\n        (blockNumber, blockHash, returnData) = tryBlockAndAggregate(true, calls);\\n    }\\n\\n    /// @notice Aggregate calls, ensuring each returns success if required\\n    /// @param calls An array of Call3 structs\\n    /// @return returnData An array of Result structs\\n    function aggregate3(Call3[] calldata calls) public payable returns (Result[] memory returnData) {\\n        uint256 length = calls.length;\\n        returnData = new Result[](length);\\n        Call3 calldata calli;\\n        for (uint256 i = 0; i < length;) {\\n            Result memory result = returnData[i];\\n            calli = calls[i];\\n            (result.success, result.returnData) = calli.target.call(calli.callData);\\n            assembly {\\n                // Revert if the call fails and failure is not allowed\\n                // `allowFailure := calldataload(add(calli, 0x20))` and `success := mload(result)`\\n                if iszero(or(calldataload(add(calli, 0x20)), mload(result))) {\\n                    // set \\\"Error(string)\\\" signature: bytes32(bytes4(keccak256(\\\"Error(string)\\\")))\\n                    mstore(0x00, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n                    // set data offset\\n                    mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n                    // set length of revert string\\n                    mstore(0x24, 0x0000000000000000000000000000000000000000000000000000000000000017)\\n                    // set revert string: bytes32(abi.encodePacked(\\\"Multicall3: call failed\\\"))\\n                    mstore(0x44, 0x4d756c746963616c6c333a2063616c6c206661696c6564000000000000000000)\\n                    revert(0x00, 0x64)\\n                }\\n            }\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /// @notice Aggregate calls with a msg value\\n    /// @notice Reverts if msg.value is less than the sum of the call values\\n    /// @param calls An array of Call3Value structs\\n    /// @return returnData An array of Result structs\\n    function aggregate3Value(Call3Value[] calldata calls) public payable returns (Result[] memory returnData) {\\n        uint256 valAccumulator;\\n        uint256 length = calls.length;\\n        returnData = new Result[](length);\\n        Call3Value calldata calli;\\n        for (uint256 i = 0; i < length;) {\\n            Result memory result = returnData[i];\\n            calli = calls[i];\\n            uint256 val = calli.value;\\n            // Humanity will be a Type V Kardashev Civilization before this overflows - andreas\\n            // ~ 10^25 Wei in existence << ~ 10^76 size uint fits in a uint256\\n            unchecked { valAccumulator += val; }\\n            (result.success, result.returnData) = calli.target.call{value: val}(calli.callData);\\n            assembly {\\n                // Revert if the call fails and failure is not allowed\\n                // `allowFailure := calldataload(add(calli, 0x20))` and `success := mload(result)`\\n                if iszero(or(calldataload(add(calli, 0x20)), mload(result))) {\\n                    // set \\\"Error(string)\\\" signature: bytes32(bytes4(keccak256(\\\"Error(string)\\\")))\\n                    mstore(0x00, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n                    // set data offset\\n                    mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n                    // set length of revert string\\n                    mstore(0x24, 0x0000000000000000000000000000000000000000000000000000000000000017)\\n                    // set revert string: bytes32(abi.encodePacked(\\\"Multicall3: call failed\\\"))\\n                    mstore(0x44, 0x4d756c746963616c6c333a2063616c6c206661696c6564000000000000000000)\\n                    revert(0x00, 0x84)\\n                }\\n            }\\n            unchecked { ++i; }\\n        }\\n        // Finally, make sure the msg.value = SUM(call[0...i].value)\\n        require(msg.value == valAccumulator, \\\"Multicall3: value mismatch\\\");\\n    }\\n\\n    /// @notice Returns the block hash for the given block number\\n    /// @param blockNumber The block number\\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(blockNumber);\\n    }\\n\\n    /// @notice Returns the block number\\n    function getBlockNumber() public view returns (uint256 blockNumber) {\\n        blockNumber = block.number;\\n    }\\n\\n    /// @notice Returns the block coinbase\\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\\n        coinbase = block.coinbase;\\n    }\\n\\n    /// @notice Returns the block difficulty\\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\\n        difficulty = block.difficulty;\\n    }\\n\\n    /// @notice Returns the block gas limit\\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\n        gaslimit = block.gaslimit;\\n    }\\n\\n    /// @notice Returns the block timestamp\\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n\\n    /// @notice Returns the (ETH) balance of a given address\\n    function getEthBalance(address addr) public view returns (uint256 balance) {\\n        balance = addr.balance;\\n    }\\n\\n    /// @notice Returns the block hash of the last block\\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\\n        unchecked {\\n            blockHash = blockhash(block.number - 1);\\n        }\\n    }\\n\\n    /// @notice Gets the base fee of the given block\\n    /// @notice Can revert if the BASEFEE opcode is not implemented by the given chain\\n    function getBasefee() public view returns (uint256 basefee) {\\n        basefee = block.basefee;\\n    }\\n\\n    /// @notice Returns the chain id\\n    function getChainId() public view returns (uint256 chainid) {\\n        chainid = block.chainid;\\n    }\\n}\",\"keccak256\":\"0x669cac004e2cdbd802bc511cc0d734a8cb234ac143b4b833459ad1153b12d406\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610abc908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80630f28c97d14610117578063174dea7114610112578063252dba421461010d57806327e86d6e146101085780633408e47014610103578063399542e9146100fe5780633e64a696146100f957806342cbb15c146100f45780634d2301cc146100ef57806372425d9d146100ea57806382ad56cb146100e557806386d516e8146100e0578063a8b0574e146100db578063bce38bd7146100d6578063c3077fa9146100d15763ee82ac5e146100cc57600080fd5b61076f565b6106d5565b6106b2565b610697565b61067c565b6105b2565b610597565b61056f565b610543565b610528565b610504565b610495565b610475565b6103b4565b610259565b34610132576000366003190112610132576020604051428152f35b600080fd5b9181601f84011215610132578235916001600160401b038311610132576020808501948460051b01011161013257565b602060031982011261013257600435906001600160401b0382116101325761019191600401610137565b9091565b919082519283825260005b8481106101c1575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016101a0565b908082519081815260208091019281808460051b8301019501936000915b8483106102035750505050505090565b9091929394958480610235600193601f19868203018752828b5180511515835201519060409081858201520190610195565b98019301930191949392906101f3565b9060206102569281815201906101d5565b90565b61026236610167565b600061026d82610900565b91815b8181106102965761029284610286853414610a3d565b60405191829182610245565b0390f35b6102a081856108a6565b516102ac828488610a1b565b60008060406102e081850135809901986102c586610821565b926102d3606088018861082b565b939091518094819361085d565b03925af1916102ed61086b565b90610302602094859384840152829015159052565b5191013517156103155750600101610270565b62461bcd60e51b600052600452601760245276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b60445260846000fd5b90604082019082526020604081840152835180925260608301928160608460051b8301019501936000915b8483106103865750505050505090565b90919293949584806103a4600193605f198682030187528a51610195565b9801930193019194939290610376565b6103bd36610167565b906103cf6103ca836107cd565b6107a3565b82815291601f196103df826107cd565b0160005b81811061046457505060005b818110610405576040518061029286438361034b565b8061045e60008061041960019587896107fa565b8161043161042683610821565b92602081019061082b565b91906104426040518094819361085d565b03925af161044e61086b565b61045884896108a6565b526108ba565b016103ef565b8060606020809388010152016103e3565b346101325760003660031901126101325760206040516000194301408152f35b34610132576000366003190112610132576020604051468152f35b9060406003198301126101325760043580151581036101325791602435906001600160401b0382116101325761019191600401610137565b61025693926060928252602082015281604082015201906101d5565b610292610519610513366104b0565b91610963565b604051918291434043846104e8565b34610132576000366003190112610132576020604051488152f35b34610132576000366003190112610132576020604051438152f35b6001600160a01b0381160361013257565b3461013257602036600319011261013257602060043561058e8161055e565b31604051908152f35b34610132576000366003190112610132576020604051448152f35b6105bb36610167565b6105c481610900565b9060005b8181106105dd57604051806102928582610245565b6105e781846108a6565b516105f38284876109f9565b6000806105ff83610821565b6106118260406102d38188018861082b565b03925af19161061e61086b565b90610633602094859384840152829015159052565b51910135171561064657506001016105c8565b62461bcd60e51b600052600452601760245276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b60445260646000fd5b34610132576000366003190112610132576020604051458152f35b34610132576000366003190112610132576020604051418152f35b6102926106c1610513366104b0565b6040519182916020835260208301906101d5565b6106de36610167565b6106e781610900565b9160005b82811061070457604051806102928643804090846104e8565b80610769610714600193876108a6565b516107208387876107fa565b600080823561072e8161055e565b8161073e6020958681019061082b565b9190826040519384928337810182815203925af19061075b61086b565b9083015215158091526108ba565b016106eb565b34610132576020366003190112610132576020604051600435408152f35b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b038111838210176107c857604052565b61078d565b6001600160401b0381116107c85760051b60200190565b634e487b7160e01b600052603260045260246000fd5b919081101561081c5760051b81013590603e1981360301821215610132570190565b6107e4565b356102568161055e565b903590601e198136030182121561013257018035906001600160401b0382116101325760200191813603831361013257565b908092918237016000815290565b3d156108a1573d906001600160401b0382116107c857610894601f8301601f19166020016107a3565b9182523d6000602084013e565b606090565b805182101561081c5760209160051b010190565b156108c157565b60405162461bcd60e51b8152602060048201526017602482015276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b6044820152606490fd5b9061090d6103ca836107cd565b828152809261091e601f19916107cd565b016000805b8281106109305750505050565b60409081518281018181106001600160401b038211176107c8576020935283815282606081830152828701015201610923565b92919061096f82610900565b9360005b8381106109805750505050565b8061098d600192886108a6565b518361099a8388886107fa565b60008082356109a88161055e565b816109b86020958681019061082b565b9190826040519384928337810182815203925af1906109d561086b565b9084015215158092526109ea575b5001610973565b6109f3906108ba565b386109e3565b919081101561081c5760051b81013590605e1981360301821215610132570190565b919081101561081c5760051b81013590607e1981360301821215610132570190565b15610a4457565b60405162461bcd60e51b815260206004820152601a60248201527909aead8e8d2c6c2d8d8667440ecc2d8eaca40dad2e6dac2e8c6d60331b6044820152606490fdfea2646970667358221220718061f4deb74de7e23b6b1711a89314ce31f99582c39e541849edade94bdc7364736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80630f28c97d14610117578063174dea7114610112578063252dba421461010d57806327e86d6e146101085780633408e47014610103578063399542e9146100fe5780633e64a696146100f957806342cbb15c146100f45780634d2301cc146100ef57806372425d9d146100ea57806382ad56cb146100e557806386d516e8146100e0578063a8b0574e146100db578063bce38bd7146100d6578063c3077fa9146100d15763ee82ac5e146100cc57600080fd5b61076f565b6106d5565b6106b2565b610697565b61067c565b6105b2565b610597565b61056f565b610543565b610528565b610504565b610495565b610475565b6103b4565b610259565b34610132576000366003190112610132576020604051428152f35b600080fd5b9181601f84011215610132578235916001600160401b038311610132576020808501948460051b01011161013257565b602060031982011261013257600435906001600160401b0382116101325761019191600401610137565b9091565b919082519283825260005b8481106101c1575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016101a0565b908082519081815260208091019281808460051b8301019501936000915b8483106102035750505050505090565b9091929394958480610235600193601f19868203018752828b5180511515835201519060409081858201520190610195565b98019301930191949392906101f3565b9060206102569281815201906101d5565b90565b61026236610167565b600061026d82610900565b91815b8181106102965761029284610286853414610a3d565b60405191829182610245565b0390f35b6102a081856108a6565b516102ac828488610a1b565b60008060406102e081850135809901986102c586610821565b926102d3606088018861082b565b939091518094819361085d565b03925af1916102ed61086b565b90610302602094859384840152829015159052565b5191013517156103155750600101610270565b62461bcd60e51b600052600452601760245276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b60445260846000fd5b90604082019082526020604081840152835180925260608301928160608460051b8301019501936000915b8483106103865750505050505090565b90919293949584806103a4600193605f198682030187528a51610195565b9801930193019194939290610376565b6103bd36610167565b906103cf6103ca836107cd565b6107a3565b82815291601f196103df826107cd565b0160005b81811061046457505060005b818110610405576040518061029286438361034b565b8061045e60008061041960019587896107fa565b8161043161042683610821565b92602081019061082b565b91906104426040518094819361085d565b03925af161044e61086b565b61045884896108a6565b526108ba565b016103ef565b8060606020809388010152016103e3565b346101325760003660031901126101325760206040516000194301408152f35b34610132576000366003190112610132576020604051468152f35b9060406003198301126101325760043580151581036101325791602435906001600160401b0382116101325761019191600401610137565b61025693926060928252602082015281604082015201906101d5565b610292610519610513366104b0565b91610963565b604051918291434043846104e8565b34610132576000366003190112610132576020604051488152f35b34610132576000366003190112610132576020604051438152f35b6001600160a01b0381160361013257565b3461013257602036600319011261013257602060043561058e8161055e565b31604051908152f35b34610132576000366003190112610132576020604051448152f35b6105bb36610167565b6105c481610900565b9060005b8181106105dd57604051806102928582610245565b6105e781846108a6565b516105f38284876109f9565b6000806105ff83610821565b6106118260406102d38188018861082b565b03925af19161061e61086b565b90610633602094859384840152829015159052565b51910135171561064657506001016105c8565b62461bcd60e51b600052600452601760245276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b60445260646000fd5b34610132576000366003190112610132576020604051458152f35b34610132576000366003190112610132576020604051418152f35b6102926106c1610513366104b0565b6040519182916020835260208301906101d5565b6106de36610167565b6106e781610900565b9160005b82811061070457604051806102928643804090846104e8565b80610769610714600193876108a6565b516107208387876107fa565b600080823561072e8161055e565b8161073e6020958681019061082b565b9190826040519384928337810182815203925af19061075b61086b565b9083015215158091526108ba565b016106eb565b34610132576020366003190112610132576020604051600435408152f35b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b038111838210176107c857604052565b61078d565b6001600160401b0381116107c85760051b60200190565b634e487b7160e01b600052603260045260246000fd5b919081101561081c5760051b81013590603e1981360301821215610132570190565b6107e4565b356102568161055e565b903590601e198136030182121561013257018035906001600160401b0382116101325760200191813603831361013257565b908092918237016000815290565b3d156108a1573d906001600160401b0382116107c857610894601f8301601f19166020016107a3565b9182523d6000602084013e565b606090565b805182101561081c5760209160051b010190565b156108c157565b60405162461bcd60e51b8152602060048201526017602482015276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b6044820152606490fd5b9061090d6103ca836107cd565b828152809261091e601f19916107cd565b016000805b8281106109305750505050565b60409081518281018181106001600160401b038211176107c8576020935283815282606081830152828701015201610923565b92919061096f82610900565b9360005b8381106109805750505050565b8061098d600192886108a6565b518361099a8388886107fa565b60008082356109a88161055e565b816109b86020958681019061082b565b9190826040519384928337810182815203925af1906109d561086b565b9084015215158092526109ea575b5001610973565b6109f3906108ba565b386109e3565b919081101561081c5760051b81013590605e1981360301821215610132570190565b919081101561081c5760051b81013590607e1981360301821215610132570190565b15610a4457565b60405162461bcd60e51b815260206004820152601a60248201527909aead8e8d2c6c2d8d8667440ecc2d8eaca40dad2e6dac2e8c6d60331b6044820152606490fdfea2646970667358221220718061f4deb74de7e23b6b1711a89314ce31f99582c39e541849edade94bdc7364736f6c63430008130033",
  "devdoc": {
    "author": "Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>Andreas Bigger <andreas@nascent.xyz>Matt Solomon <matt@mattsolomon.dev>",
    "details": "Multicall & Multicall2 backwards-compatibleAggregate methods are marked `payable` to save 24 gas per call",
    "kind": "dev",
    "methods": {
      "aggregate((address,bytes)[])": {
        "params": {
          "calls": "An array of Call structs"
        },
        "returns": {
          "blockNumber": "The block number where the calls were executed",
          "returnData": "An array of bytes containing the responses"
        }
      },
      "aggregate3((address,bool,bytes)[])": {
        "params": {
          "calls": "An array of Call3 structs"
        },
        "returns": {
          "returnData": "An array of Result structs"
        }
      },
      "aggregate3Value((address,bool,uint256,bytes)[])": {
        "params": {
          "calls": "An array of Call3Value structs"
        },
        "returns": {
          "returnData": "An array of Result structs"
        }
      },
      "blockAndAggregate((address,bytes)[])": {
        "params": {
          "calls": "An array of Call structs"
        },
        "returns": {
          "blockHash": "The hash of the block where the calls were executed",
          "blockNumber": "The block number where the calls were executed",
          "returnData": "An array of Result structs"
        }
      },
      "getBlockHash(uint256)": {
        "params": {
          "blockNumber": "The block number"
        }
      },
      "tryAggregate(bool,(address,bytes)[])": {
        "params": {
          "calls": "An array of Call structs",
          "requireSuccess": "If true, require all calls to succeed"
        },
        "returns": {
          "returnData": "An array of Result structs"
        }
      },
      "tryBlockAndAggregate(bool,(address,bytes)[])": {
        "params": {
          "calls": "An array of Call structs"
        },
        "returns": {
          "blockHash": "The hash of the block where the calls were executed",
          "blockNumber": "The block number where the calls were executed",
          "returnData": "An array of Result structs"
        }
      }
    },
    "title": "Multicall3",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "aggregate((address,bytes)[])": {
        "notice": "Backwards-compatible call aggregation with Multicall"
      },
      "aggregate3((address,bool,bytes)[])": {
        "notice": "Aggregate calls, ensuring each returns success if required"
      },
      "aggregate3Value((address,bool,uint256,bytes)[])": {
        "notice": "Aggregate calls with a msg valueReverts if msg.value is less than the sum of the call values"
      },
      "blockAndAggregate((address,bytes)[])": {
        "notice": "Backwards-compatible with Multicall2Aggregate calls and allow failures using tryAggregate"
      },
      "getBasefee()": {
        "notice": "Gets the base fee of the given blockCan revert if the BASEFEE opcode is not implemented by the given chain"
      },
      "getBlockHash(uint256)": {
        "notice": "Returns the block hash for the given block number"
      },
      "getBlockNumber()": {
        "notice": "Returns the block number"
      },
      "getChainId()": {
        "notice": "Returns the chain id"
      },
      "getCurrentBlockCoinbase()": {
        "notice": "Returns the block coinbase"
      },
      "getCurrentBlockDifficulty()": {
        "notice": "Returns the block difficulty"
      },
      "getCurrentBlockGasLimit()": {
        "notice": "Returns the block gas limit"
      },
      "getCurrentBlockTimestamp()": {
        "notice": "Returns the block timestamp"
      },
      "getEthBalance(address)": {
        "notice": "Returns the (ETH) balance of a given address"
      },
      "getLastBlockHash()": {
        "notice": "Returns the block hash of the last block"
      },
      "tryAggregate(bool,(address,bytes)[])": {
        "notice": "Backwards-compatible with Multicall2Aggregate calls without requiring success"
      },
      "tryBlockAndAggregate(bool,(address,bytes)[])": {
        "notice": "Backwards-compatible with Multicall2Aggregate calls and allow failures using tryAggregate"
      }
    },
    "notice": "Aggregate results from multiple function calls",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}